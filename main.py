# import logging
# from aiogram import Bot, Dispatcher, types
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.dispatcher import FSMContext
# from aiogram.dispatcher.filters.state import State, StatesGroup
# from aiogram.utils import executor
# from aiogram.dispatcher.filters import Text
# from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
# from keyboards import *
# from settings import BOT_TOKEN, ADMIN_GROUP_ID
# from work import *
# import random
# from reportlab.lib.utils import ImageReader
# import aiohttp
# from reportlab.lib.pagesizes import letter
# from reportlab.pdfgen import canvas
# import tempfile
# from reportlab.lib.pagesizes import letter
# from reportlab.lib.units import inch
# from reportlab.pdfgen import canvas
# from reportlab.lib import utils
# import tempfile
# import io
# import aiohttp
# from PIL import Image
#
# logging.basicConfig(level=logging.INFO)
# bot = Bot(token=BOT_TOKEN)
# storage = MemoryStorage()
# dp = Dispatcher(bot, storage=storage)
#
#
# class Registration(StatesGroup):
#     name = State()
#     phone = State()
#     city = State()
#     scammer_name = State()
#     theft_amount = State()
#     fraud_method = State()
#     exchange_name = State()
#     conversation_screenshots = State()
#     scam_wallet_address = State()
#
#
# # List of code words
# code_words = [
#     "–°–æ–ª–Ω—Ü–µ", "–õ—É–Ω–∞", "–ó–≤–µ–∑–¥–∞", "–ö–æ–º–µ—Ç–∞", "–ú–µ—Ç–µ–æ—Ä", "–ê—Å—Ç–µ—Ä–æ–∏–¥", "–ì–∞–ª–∞–∫—Ç–∏–∫–∞", "–ö–æ—Å–º–æ—Å", "–í—Å–µ–ª–µ–Ω–Ω–∞—è",
#     "–ú–ª–µ—á–Ω—ã–π–ü—É—Ç—å", "–ü–ª–∞–Ω–µ—Ç–∞", "–û—Ä–±–∏—Ç–∞", "–°–ø—É—Ç–Ω–∏–∫", "–¢—É–º–∞–Ω–Ω–æ—Å—Ç—å", "–ö–≤–∞–∑–∞—Ä—ã", "–ü—É–ª—å—Å–∞—Ä", "–ß–µ—Ä–Ω–∞—è–î—ã—Ä–∞",
#     "–°—É–ø–µ—Ä–Ω–æ–≤–∞", "–ù–µ–±–æ", "–°–æ–∑–≤–µ–∑–¥–∏–µ", "–ì–æ—Ä–∏–∑–æ–Ω—Ç", "–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞", "–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è", "–°–≤–µ—Ç", "–¢–µ–º–Ω–æ—Ç–∞",
#     "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "–ò–∑–ª—É—á–µ–Ω–∏–µ", "–í–∞–∫—É—É–º", "–û–∑–æ–Ω–æ–≤—ã–π–°–ª–æ–π", "–ö–ª–∏–º–∞—Ç", "–≠–∫–≤–∞—Ç–æ—Ä", "–ü–æ–ª—é—Å", "–ú–µ—Ä–∏–¥–∏–∞–Ω",
#     "–ó–∞—Ç–º–µ–Ω–∏–µ", "–§–∞–∑–∞–∑–µ–º–ª–∏", "–ü–æ–ª—è—Ä–Ω–∞—è–ó–≤–µ–∑–¥–∞", "–°–µ–≤–µ—Ä–Ω–æ–µ–°–∏—è–Ω–∏–µ", "–Æ–∂–Ω–æ–µ–°–∏—è–Ω–∏–µ", "–ú–∞–≥–Ω–∏—Ç–Ω–æ–µ–ü–æ–ª–µ",
#     "–ê–ª—å–±–µ–¥–æ", "–†–∞–¥–∏–æ—Ç–µ–ª–µ—Å–∫–æ–ø", "–°–ø–µ–∫—Ç—Ä", "–¶–µ–Ω—Ç—Ä–ú–∞—Å—Å—ã", "–ê–ø–æ–≥–µ–π", "–ü–µ—Ä–∏–≥–µ–π", "–ê–ª—å—Ñ–∞–¶–µ–Ω—Ç–∞–≤—Ä–∞",
#     "–ü—Ä–æ—Ç–æ–Ω", "–≠–ª–µ–∫—Ç—Ä–æ–Ω", "–ù–µ–π—Ç—Ä–æ–Ω", "–ò–æ–Ω", "–ü–ª–∞–∑–º–∞", "–ü–∞—Ç—Ä–æ–Ω", "–ì—Ä–∞–≤–∏—Ç–æ–Ω", "–§–æ—Ç–æ–Ω", "–ö–≤–∞–Ω—Ç", "–§–∏–∑–∏–∫–∞",
#     "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "–ö–ª–∏–º–∞—Ç–æ–ª–æ–≥–∏—è", "–ö–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è", "–•–∏–º–∏—è", "–ê–Ω—Ç—Ä–æ–ø–æ–ª–æ–≥–∏—è", "–°–æ—Ü–∏–æ–ª–æ–≥–∏—è",
#     "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "–≠–Ω—Ç–æ–º–æ–ª–æ–≥–∏—è", "–≠–∫–æ–ª–æ–≥–∏—è", "–≠—Ç–Ω–æ–≥—Ä–∞—Ñ–∏—è", "–ë–∏–æ—Ñ–∏–∑–∏–∫–∞", "–ì–µ–æ–ª–æ–≥–∏—è", "–ì–∏–¥—Ä–æ–ª–æ–≥–∏—è",
#     "–ú–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—è", "–ó–æ–æ–ª–æ–≥–∏—è", "–û—Ä–Ω–∏—Ç–æ–ª–æ–≥–∏—è", "–ü–∞–ª–µ–æ–Ω—Ç–æ–ª–æ–≥–∏—è", "–°–∏—Å—Ç–µ–º–∞—Ç–∏–∫–∞", "–¢–∞–∫—Å–æ–Ω–æ–º–∏—è",
#     "–§–∏–∑–∏–æ–ª–æ–≥–∏—è", "–≠–≤–æ–ª—é—Ü–∏—è", "–ì–µ–Ω–µ—Ç–∏–∫–∞", "–ú–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—è", "–ë–æ—Ç–∞–Ω–∏–∫–∞", "–ë–∏–æ—Ö–∏–º–∏—è", "–¶–∏—Ç–æ–ª–æ–≥–∏—è",
#     "–ò–º–º—É–Ω–æ–ª–æ–≥–∏—è", "–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è–ë–∏–æ–ª–æ–≥–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–û–∫–µ–∞–Ω–æ–ª–æ–≥–∏—è", "–õ–∏–º–Ω–æ–ª–æ–≥–∏—è", "–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞",
#     "–ë–∏–æ–º", "–§–∞—É–Ω–æ–≤–µ–¥–µ–Ω–∏–µ", "–§–ª–æ—Ä–∞", "–ì–µ–æ–±–æ—Ç–∞–Ω–∏–∫–∞", "–û—Ä–Ω–∏—Ç–æ—Ñ–∞—É–Ω–∞"
# ]
#
#
# def generate_unique_case_identifier():
#     serial_number = random.randint(1000, 9999)
#     code_word = random.choice(code_words)
#     return f"{serial_number}-{code_word}"
#
# @dp.message_handler(commands=['start'])
# async def start(message: types.Message):
#     user_id = message.from_user.id
#     user = get_user(user_id)
#     if not user:
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language / Tilni tanlang", reply_markup=language_menu())
#     else:
#         await message.answer('–ú–µ–Ω—é', reply_markup=main_keyboard('ru'))
#
# @dp.message_handler(commands=['id'])
# async def start(message: types.Message):
#     chat_id = message.chat.id
#     await message.answer(f"{chat_id}")
#
# @dp.message_handler(Text(equals=['üá∫üáø O\'zbekcha', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'üá¨üáß English']))
# async def set_language_and_register(message: types.Message, state: FSMContext):
#     if message.text == 'üá∫üáø O\'zbekcha':
#         lang = 'uz'
#     elif message.text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
#         lang = 'ru'
#     else:
#         lang = 'en'
#
#     await state.update_data(language=lang)
#     await start_registration(message, state)
#
# async def start_registration(message: types.Message, state: FSMContext):
#     user_data = await state.get_data()
#     name = message.from_user.full_name
#     lang = user_data.get('language', 'en')
#
#     prompts = {
#         'ru': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
#         'uz': "Ismingizni kiriting:",
#         'en': "Enter your name:"
#     }
#
#     await message.answer(prompts[lang], reply_markup=generate_name(name))
#     await Registration.name.set()
#
# @dp.message_handler(state=Registration.name)
# async def process_name(message: types.Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#
#     contact_keyb = contact_keyboard(lang)
#
#     prompts = {
#         'ru': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
#         'uz': "Telefon raqamingizni yuboring:",
#         'en': "Send your phone number:"
#     }
#
#     await message.answer(prompts[lang], reply_markup=contact_keyb)
#     await Registration.phone.set()
#
#
# @dp.message_handler(content_types=types.ContentType.CONTACT, state=Registration.phone)
# async def process_phone(message: types.Message, state: FSMContext):
#     contact = message.contact
#     if contact is None:
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
#         return
#
#     await state.update_data(phone=contact.phone_number)
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#
#     prompts = {
#         'ru': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
#         'uz': "Shaharingizni kiriting:",
#         'en': "Enter your city:"
#     }
#
#     await message.answer(prompts[lang], reply_markup=ReplyKeyboardRemove())
#     await Registration.city.set()
#
# FAQS = {
#     'ru': {
#         "1. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∞–∫—Ç–∏–≤–æ–≤?": "–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞–∫—Ç–∏–≤–æ–≤ –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Å–ª—É—á–∞—è. –í —Å—Ä–µ–¥–Ω–µ–º, –ø—Ä–æ—Ü–µ—Å—Å –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 5 –¥–æ 6 –º–µ—Å—è—Ü–µ–≤. –û–¥–Ω–∞–∫–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É—á–∞–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ—à–µ–Ω—ã –±—ã—Å—Ç—Ä–µ–µ –∏–ª–∏ –¥–æ–ª—å—à–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.",
#         "2. –í–æ–∑–º–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∏–ª–∏ —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤—ã?": "–î–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∏–ª–∏ —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤—ã. –ù–∞—à —É—Å–ø–µ—Ö –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞, —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–æ—Ç–µ—Ä–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è –º–µ—Ä. –•–æ—Ç—è –º—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç, –∫–∞–∂–¥—ã–π —Å–ª—É—á–∞–π —É–Ω–∏–∫–∞–ª–µ–Ω –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
#         "3. –°–∫–æ–ª—å–∫–æ –≤—ã –≤–∑–∏–º–∞–µ—Ç–µ –∑–∞ —É—Å–ª—É–≥–∏ –ø–æ –≤–æ–∑–≤—Ä–∞—Ç—É –∞–∫—Ç–∏–≤–æ–≤?": "–ù–∞—à–∏ –≥–æ–Ω–æ—Ä–∞—Ä—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–ª—É—á–∞—è. –û–±—ã—á–Ω–æ –º—ã –≤–∑–∏–º–∞–µ–º –∞–≤–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω–æ–π —Å—É–º–º—ã. –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç 10% –¥–æ 50%, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ —Å—É–º–º—ã.",
#         "4. –ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞?": "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–∏, –≤–∫–ª—é—á–∞—è –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤, –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é. –ß–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ, —Ç–µ–º –ª—É—á—à–µ –º—ã —Å–º–æ–∂–µ–º –ø–æ–º–æ—á—å –≤–∞–º –≤ –≤–æ–∑–≤—Ä–∞—Ç–µ –∞–∫—Ç–∏–≤–æ–≤.",
#         "5. –ö–∞–∫ –≤—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?": "–ú—ã –ø—Ä–∏–¥–∞–µ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–µ—Ä—ã –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–¥–ª–µ–∂–∞—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.",
#         "6. –ö–∞–∫–∏–µ —Ç–∏–ø—ã –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –≤–µ—Ä–Ω—É—Ç—å?": "–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–µ —à–∏—Ä–æ–∫–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞ –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤–æ–≤, –≤–∫–ª—é—á–∞—è, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å, –ë–∏—Ç–∫–æ–π–Ω–æ–º, –≠—Ñ–∏—Ä–∏—É–º–æ–º –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞–ª—å—Ç–∫–æ–π–Ω–∞–º–∏. –ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, –º–æ–∂–µ–º –ª–∏ –º—ã –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–∫—Ç–∏–≤–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.",
#         "7. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏ –≤—ã –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∞–∫—Ç–∏–≤–æ–≤?": "–•–æ—Ç—è –º—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–æ–≤, –º—ã –Ω–µ –º–æ–∂–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞–∂–¥–æ–º —Å–ª—É—á–∞–µ –∏–∑-–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–µ–π. –û–¥–Ω–∞–∫–æ –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –≤–∞–º —Ç—â–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –æ–±–æ–∑–Ω–∞—á–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã.",
#         "8. –ö–∞–∫ —è –º–æ–≥—É –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏?": "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —Å–ª—É—á–∞–µ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∞–π—Ç –∏–ª–∏ –±–æ—Ç. –ú—ã –æ—Ü–µ–Ω–∏–º —Å–ª—É—á–∞–π –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —Å –Ω–∞—à–∏–º–∏ –≤—ã–≤–æ–¥–∞–º–∏ –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ —à–∞–≥–∞–º–∏.",
#         "9. –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ –º–æ–∏ –∞–∫—Ç–∏–≤—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã?": "–ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —É—Å–∏–ª–∏–π –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º, —á—Ç–æ –≤–∞—à–∏ –∞–∫—Ç–∏–≤—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, –º—ã —Å–æ–æ–±—â–∏–º –≤–∞–º –æ–± —ç—Ç–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã –∞–≤–∞–Ω—Å–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –ø–æ–∫—Ä—ã–≤–∞—é—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –Ω–∞—à–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —É—Å–∏–ª–∏—è.",
#         "10. –ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–º–æ—á—å –≤–µ—Ä–Ω—É—Ç—å –∞–∫—Ç–∏–≤—ã, –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π?": "–î–∞, —É –Ω–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å —Å–ª—É—á–∞—è–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç —É—Å–µ—Ä–¥–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∞–∫—Ç–∏–≤–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –≤–æ–∑–≤—Ä–∞—Ç–∞. –û–¥–Ω–∞–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç—ã—Ö –º–µ—Ä."
#     },
#     'uz': {
#         "1. Kripto aktivlarimni qaytarish qancha vaqtni o`z ichiga oladi?": "Aktivlarni qaytarib olish uchun ketadigan vaqt ishning o'ziga xos xususiyatlariga qarab farq qilishi mumkin. O'rtacha hisobda, bu jarayon odatda 5-6 oy davom etadi. Biroq, ba'zi ishlar murakkabligi va talab etiladigan resurslariga qarab tezroq hal bo'lishi yoki uzoqroq vaqt olishi mumkin.",
#         "2. Yo`qolgan yoki o`g`irlangan kripto aktivlarni qaytarish mumkinmi?": "Ha, yo'qolgan yoki o'g'irlangan kripto aktivlarni qaytarib olish mumkin. Bizning muvaffaqiyatimiz aktiv turi, yo'qotish tabiati va harakat tezligi kabi turli omillarga bog'liq. Biz aktivlarni qaytarib olish imkoniyatlarini maksimal darajada oshirishga harakat qilsak-da, har bir holat o'ziga xos va natijalar ham turlicha bo'lishi mumkin.",
#         "3. Kripto aktivlarni qaytarish xizmatlari uchun qancha haq olasiz?": "Bizning xizmat haqlarimiz har bir holatning o'ziga xos xususiyatlariga bog'liq. Biz odatda dastlabki xarajatlarni qoplash uchun avans to‚Äòlovini va undirilgan summaning foiziga qarab qayta tiklash to‚Äòlovini olamiz. Bu foiz qaytarish qiyinchiligi va jalb qilingan summa kabi omillarga qarab 10% dan 50% gacha bo'lishi mumkin.",
#         "4. Men qaytarish jarayoni boshlanishi uchun qanday ma‚Äôlumotlarni taqdim qilishim kerak?": "Qaytarish jarayonini boshlash uchun biz hodisa haqida batafsil ma'lumotni talab qilamiz, jumladan tranzaksiya tafsilotlari, hamyon manzillari, aloqa yozuvlari va boshqa tegishli hujjatlar kabi. Siz qanchalik ko'p ma'lumot taqdim eta olsangiz, biz sizning aktivlaringizni qaytarib olishda shunchalik yaxshi yordam bera olamiz.",
#         "5. Mening ma'lumotlarim xavfsizligi va maxfiyligini qanday ta'minlaysiz?": "Biz sizning ma'lumotlaringiz xavfsizligi va maxfiyligini birinchi o`ringa qo`yamiz. Bizning jamoamiz sizning shaxsiy ma'lumotlaringiz eng yuqori darajadagi e'tibor va maxfiylik bilan ta‚Äôminlanishi uchun qat‚Äôiy xavfsizlik protokollaridan va ma‚Äôlumotlarni himoya qilish chora-tadbirlaridan foydalanadi.",
#         "6. Qanday turdagi kripto aktivlarni tiklashga yordam bera olasiz?": "Biz turli xil kripto aktivlarni qaytarib olishga ixtisoslashganmiz, jumladan, lekin cheklanmagan holda, Bitcoin, Ethereum va turli altcoinlar. Agar siz bizning aniq aktiv bilan yordam bera olishimizdan shubhalansangiz, iltimos, maslahat uchun biz bilan bog‚Äôlaning.",
#         "7. Siz aktivlarni qaytarish uchun qandaydir kafolatlar taklif qila olasizmi?": "Biz aktivlaringizni qaytarish uchun barcha imkoniyatlarni amalga oshirishga harakat qilsak-da, har bir holatda 100% kafolat bera olmaymiz. Biroq, biz sizning holatingizni batafsil baholaymiz va ishni boshlashdan oldin mumkin bo‚Äôlgan muvaffaqiyat darajasini belgilaymiz.",
#         "8. Qanday qilib sizning xizmatlaringizdan foydalanishni boshlashim mumkin?": "Boshlash uchun, iltimos, saytimiz yoki bot orqali sizning holatingiz haqida barcha kerakli ma‚Äôlumotlarni yuboring. Biz holatni baholaymiz va sizga keyingi qadamlar va natijalar bilan bog‚Äôlanamiz.",
#         "9. Agar aktivlarimni qaytarish imkoniyati bolmasa nima boladi?": "Agar bizning batafsil tekshiruv va harakatlardan so‚Äông aktivlaringizni qaytarib olish imkoniyati bo‚Äôlmasa, biz sizga bu haqda xabar beramiz. E‚Äôtibor bering, dastlabki to‚Äôlovlarni qaytarib berish yo‚Äôq, chunki ular bizning tadqiqot va harakatlarimiz uchun dastlabki xarajatlarni qoplashni o‚Äôz ichiga oladi.",
#         "10. Firibgarlik natijasida yo‚Äòqolgan aktivlarni qayta tiklashga yordam bera olasizmi?": "Ha, biz firibgarlik va soxtalashtirish bilan bog‚Äôliq holatlar bilan ishlash tajribasiga egamiz. Bizning jamoamiz aktivlarni aniqlash va qaytarish uchun barcha sa‚Äôy-harakatlarni amalga oshiradi. Biroq, firibgarlikning xususiyati va tezkorlikka qarab muvaffaqiyat darajasi turlicha bo‚Äôlishi mumkin."
#     }
# }
#
#
# @dp.message_handler(lambda message: message.text in ['‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', '‚ùì Tez-tez so‚Äòraladigan savollar'])
# async def faq_menu(message: types.Message):
#     lang = 'ru' if message.text == '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã' else 'uz'
#     markup = faq_keyboard(lang)
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)
#
# @dp.message_handler(lambda message: message.text in FAQS['ru'] or message.text in FAQS['uz'])
# async def faq_answer(message: types.Message):
#     lang = 'ru' if message.text in FAQS['ru'] else 'uz'
#     answer = FAQS[lang].get(message.text, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#     await message.answer(answer)
#
#
# @dp.message_handler(regexp="üîô")
# async def back(message: types.Message):
#     user_id = message.from_user.id
#     lang = get_lang(user_id)
#     if lang == ('ru',):
#         await message.answer('üëàüèª', reply_markup=main_keyboard('ru'))
#     elif lang == ('uz',):
#         await message.answer('üëàüèª', reply_markup=main_keyboard('uz'))
#
# @dp.message_handler(state=Registration.city)
# async def process_city(message: types.Message, state: FSMContext):
#     await state.update_data(city=message.text)
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#
#     prompts = {
#         'ru': "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–æ—à–µ–Ω–Ω–∏–∫–∞:",
#         'uz': "Moshennik ismini kiriting:",
#         'en': "Enter the scammer's name:"
#     }
#
#     await message.answer(prompts[lang])
#     await Registration.scammer_name.set()
#
# @dp.message_handler(state=Registration.scammer_name)
# async def process_scammer_name(message: types.Message, state: FSMContext):
#     await state.update_data(scammer_name=message.text)
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#
#     prompts = {
#         'ru': "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–∞–∂–∏:",
#         'uz': "O'g'irlik summasini kiriting:",
#         'en': "Enter the theft amount:"
#     }
#
#     await message.answer(prompts[lang])
#     await Registration.theft_amount.set()
#
# @dp.message_handler(state=Registration.theft_amount)
# async def process_theft_amount(message: types.Message, state: FSMContext):
#     await state.update_data(theft_amount=message.text)
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#
#     prompts = {
#         'ru': "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∞—è —Å—Ö–µ–º–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å:",
#         'uz': "Qanday firibgarlik sxemasi ishlatilganligini tavsiflang:",
#         'en': "Describe the fraud method used:"
#     }
#
#     await message.answer(prompts[lang])
#     await Registration.fraud_method.set()
#
# @dp.message_handler(state=Registration.fraud_method)
# async def process_fraud_method(message: types.Message, state: FSMContext):
#     await state.update_data(fraud_method=message.text)
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#
#     prompts = {
#         'ru': "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ –º–æ—à–µ–Ω–Ω–∏–∫–∞:",
#         'uz': "Moshennikning birjasini kiriting:",
#         'en': "Enter the scammer's exchange name:"
#     }
#
#     await message.answer(prompts[lang])
#     await Registration.exchange_name.set()
#
#
#
# def create_case_pdf(user_data, media_files, pdf_path):
#     c = canvas.Canvas(pdf_path, pagesize=letter)
#     width, height = letter
#
#     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
#     c.drawString(100, height - 50, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {user_data['name']}:")
#     c.drawString(100, height - 70, f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}")
#     c.drawString(100, height - 90, f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user_data['username']}")
#     c.drawString(100, height - 110, f"ID: {user_data['user_id']}")
#     c.drawString(100, height - 130, f"–ì–æ—Ä–æ–¥: {user_data['city']}")
#     c.drawString(100, height - 150, f"–ò–º—è –º–æ—à–µ–Ω–Ω–∏–∫–∞: {user_data['scammer_name']}")
#     c.drawString(100, height - 170, f"–°—É–º–º–∞ –∫—Ä–∞–∂–∏: {user_data['theft_amount']}")
#     c.drawString(100, height - 190, f"–°—Ö–µ–º–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞: {user_data['fraud_method']}")
#     c.drawString(100, height - 210, f"–ë–∏—Ä–∂–∞ –º–æ—à–µ–Ω–Ω–∏–∫–∞: {user_data['exchange_name']}")
#     c.drawString(100, height - 230, f"–ê–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –º–æ—à–µ–Ω–Ω–∏–∫–∞: {user_data['scam_wallet_address']}")
#     c.drawString(100, height - 250, f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: ‚Ññ{user_data['serial_number']}")
#     c.drawString(100, height - 270, f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: #{user_data['code_word']}")
#     c.drawString(100, height - 290, f"–û–ø–∏—Å–∞–Ω–∏–µ: {user_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
#
#     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
#     y_position = height - 320
#     for media in media_files:
#         image = ImageReader(media)
#         c.drawImage(image, 100, y_position, width=400, preserveAspectRatio=True, mask='auto')
#         y_position -= 220
#         if y_position < 100:
#             c.showPage()
#             y_position = height - 50
#
#     c.save()
#
#
# @dp.message_handler(content_types=types.ContentType.PHOTO, state=Registration.conversation_screenshots)
# async def process_conversation_screenshots(message: types.Message, state: FSMContext):
#     photos = message.photo
#     await state.update_data(conversation_screenshots=[photo.file_id for photo in photos])
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#  #todo Media secwtion edit fix bug
#     prompts = {
#         'ru': "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –º–æ—à–µ–Ω–Ω–∏–∫–∞:",
#         'uz': "Firibgarning kriptovalyuta manzilini kiriting:",
#         'en': "Enter the scammer's crypto wallet address:"
#     }
#
#     await message.answer(prompts[lang])
#     await Registration.scam_wallet_address.set()
#
# @dp.message_handler(state=Registration.exchange_name)
# async def process_exchange_name(message: types.Message, state: FSMContext):
#     await state.update_data(exchange_name=message.text)
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#
#     prompts = {
#         'ru': "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–µ—Ä–µ–ø–∏—Å–∫–∏:",
#         'uz': "Suhbatning skrinshotlarini biriktiring:",
#         'en': "Attach screenshots of the conversation:"
#     }
#
#     await message.answer(prompts[lang])
#     await Registration.conversation_screenshots.set()
#
#
#
# def create_case_pdf(user_data, media_files, pdf_file_path):
#     c = canvas.Canvas(pdf_file_path, pagesize=letter)
#     width, height = letter
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–ª–µ
#     c.setFont("Helvetica-Bold", 14)
#     c.drawString(1 * inch, height - 1 * inch, "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
#     c.setFont("Helvetica", 12)
#     c.drawString(1 * inch, height - 1.5 * inch, f"–ò–º—è: {user_data['name']}")
#     c.drawString(1 * inch, height - 1.75 * inch, f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}")
#     c.drawString(1 * inch, height - 2 * inch, f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user_data['username']}")
#     c.drawString(1 * inch, height - 2.25 * inch, f"ID: {user_data['user_id']}")
#     c.drawString(1 * inch, height - 2.5 * inch, f"–ì–æ—Ä–æ–¥: {user_data['city']}")
#     c.drawString(1 * inch, height - 2.75 * inch, f"–ò–º—è –º–æ—à–µ–Ω–Ω–∏–∫–∞: {user_data['scammer_name']}")
#     c.drawString(1 * inch, height - 3 * inch, f"–°—É–º–º–∞ –∫—Ä–∞–∂–∏: {user_data['theft_amount']}")
#     c.drawString(1 * inch, height - 3.25 * inch, f"–°—Ö–µ–º–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞: {user_data['fraud_method']}")
#     c.drawString(1 * inch, height - 3.5 * inch, f"–ë–∏—Ä–∂–∞ –º–æ—à–µ–Ω–Ω–∏–∫–∞: {user_data['exchange_name']}")
#     c.drawString(1 * inch, height - 3.75 * inch, f"–ê–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –º–æ—à–µ–Ω–Ω–∏–∫–∞: {user_data['scam_wallet_address']}")
#     c.drawString(1 * inch, height - 4 * inch, f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: ‚Ññ{user_data['serial_number']}")
#     c.drawString(1 * inch, height - 4.25 * inch, f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: #{user_data['code_word']}")
#     c.drawString(1 * inch, height - 4.5 * inch, f"–û–ø–∏—Å–∞–Ω–∏–µ: {user_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
#     y_position = height - 5 * inch
#     for img_data in media_files:
#         img = Image.open(io.BytesIO(img_data))
#         img_width, img_height = utils.ImageReader(img).getSize()
#         aspect = img_height / float(img_width)
#         img_width_inch = 6 * inch
#         img_height_inch = img_width_inch * aspect
#
#         if y_position - img_height_inch < 0:
#             c.showPage()
#             y_position = height - 1 * inch
#
#         c.drawImage(utils.ImageReader(img), 1 * inch, y_position - img_height_inch, width=img_width_inch, height=img_height_inch)
#         y_position -= img_height_inch + 0.5 * inch
#
#     c.save()
#
# @dp.message_handler(state=Registration.scam_wallet_address)
# async def process_scam_wallet_address(message: types.Message, state: FSMContext):
#     await state.update_data(scam_wallet_address=message.text)
#
#     user_data = await state.get_data()
#     user_id = message.from_user.id
#     user_data['user_id'] = user_id
#     user_data['username'] = message.from_user.username
#     lang = user_data.get('lang', 'ru')
#     case_id = generate_unique_case_identifier()
#     serial_number, code_word = case_id.split('-')
#
#     user_data['serial_number'] = serial_number
#     user_data['code_word'] = code_word
#
#     save_case(user_id, user_data['name'], user_data['phone'], user_data['city'], user_data['scammer_name'],
#               user_data['theft_amount'], user_data['fraud_method'], user_data['exchange_name'], user_data['scam_wallet_address'],
#               case_id, serial_number, code_word)
#
#     prompts = {
#         'ru': f"–í–∞—à–µ –¥–µ–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º: {case_id}",
#         'uz': f"Sizning ishingiz muvaffaqiyatli saqlandi: {case_id}",
#         'en': f"Your case has been successfully saved with ID: {case_id}"
#     }
#
#     await message.answer(prompts[lang], reply_markup=main_keyboard(lang))
#     await state.finish()
#
#     # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
#     media_files = []
#     for file_id in user_data.get('conversation_screenshots', []):
#         try:
#             file_info = await bot.get_file(file_id)
#             file_path = file_info.file_path
#             file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
#             async with aiohttp.ClientSession() as session:
#                 async with session.get(file_url) as response:
#                     if response.status == 200:
#                         media_files.append(await response.read())
#                     else:
#                         print(f"Failed to download file {file_id}, status: {response.status}")
#         except Exception as e:
#             print(f"Error downloading file {file_id}: {e}")
#
#     # –°–æ–∑–¥–∞–Ω–∏–µ PDF
#     with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as temp_file:
#         create_case_pdf(user_data, media_files, temp_file.name)
#         temp_file_path = temp_file.name
#
#     # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –≤ –≥—Ä—É–ø–ø—É
#     caption = f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: #{code_word}\n–û–ø–∏—Å–∞–Ω–∏–µ: {user_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
#     await bot.send_document(ADMIN_GROUP_ID, open(temp_file_path, 'rb'), caption=caption)
#
# if __name__ == '__main__':
#     executor.start_polling(dp, skip_updates=True)
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove
from keyboards import *
from settings import BOT_TOKEN, ADMIN_GROUP_ID
from work import *
# from aiogram.types import InputMediaPhoto, InputMediaVideo, InputMediaAudio
import random
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from aiogram.types import MediaGroup
from reportlab.lib.utils import ImageReader
# import io
# import tempfile


logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Registration(StatesGroup):
    name = State()
    phone = State()
    city = State()
    scammer_name = State()
    theft_amount = State()
    fraud_method = State()
    exchange_name = State()
    conversation_screenshots = State()
    scam_wallet_address = State()


# List of code words
code_words = [
    "–°–æ–ª–Ω—Ü–µ", "–õ—É–Ω–∞", "–ó–≤–µ–∑–¥–∞", "–ö–æ–º–µ—Ç–∞", "–ú–µ—Ç–µ–æ—Ä", "–ê—Å—Ç–µ—Ä–æ–∏–¥", "–ì–∞–ª–∞–∫—Ç–∏–∫–∞", "–ö–æ—Å–º–æ—Å", "–í—Å–µ–ª–µ–Ω–Ω–∞—è",
    "–ú–ª–µ—á–Ω—ã–π–ü—É—Ç—å", "–ü–ª–∞–Ω–µ—Ç–∞", "–û—Ä–±–∏—Ç–∞", "–°–ø—É—Ç–Ω–∏–∫", "–¢—É–º–∞–Ω–Ω–æ—Å—Ç—å", "–ö–≤–∞–∑–∞—Ä—ã", "–ü—É–ª—å—Å–∞—Ä", "–ß–µ—Ä–Ω–∞—è–î—ã—Ä–∞",
    "–°—É–ø–µ—Ä–Ω–æ–≤–∞", "–ù–µ–±–æ", "–°–æ–∑–≤–µ–∑–¥–∏–µ", "–ì–æ—Ä–∏–∑–æ–Ω—Ç", "–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞", "–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è", "–°–≤–µ—Ç", "–¢–µ–º–Ω–æ—Ç–∞",
    "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "–ò–∑–ª—É—á–µ–Ω–∏–µ", "–í–∞–∫—É—É–º", "–û–∑–æ–Ω–æ–≤—ã–π–°–ª–æ–π", "–ö–ª–∏–º–∞—Ç", "–≠–∫–≤–∞—Ç–æ—Ä", "–ü–æ–ª—é—Å", "–ú–µ—Ä–∏–¥–∏–∞–Ω",
    "–ó–∞—Ç–º–µ–Ω–∏–µ", "–§–∞–∑–∞–∑–µ–º–ª–∏", "–ü–æ–ª—è—Ä–Ω–∞—è–ó–≤–µ–∑–¥–∞", "–°–µ–≤–µ—Ä–Ω–æ–µ–°–∏—è–Ω–∏–µ", "–Æ–∂–Ω–æ–µ–°–∏—è–Ω–∏–µ", "–ú–∞–≥–Ω–∏—Ç–Ω–æ–µ–ü–æ–ª–µ",
    "–ê–ª—å–±–µ–¥–æ", "–†–∞–¥–∏–æ—Ç–µ–ª–µ—Å–∫–æ–ø", "–°–ø–µ–∫—Ç—Ä", "–¶–µ–Ω—Ç—Ä–ú–∞—Å—Å—ã", "–ê–ø–æ–≥–µ–π", "–ü–µ—Ä–∏–≥–µ–π", "–ê–ª—å—Ñ–∞–¶–µ–Ω—Ç–∞–≤—Ä–∞",
    "–ü—Ä–æ—Ç–æ–Ω", "–≠–ª–µ–∫—Ç—Ä–æ–Ω", "–ù–µ–π—Ç—Ä–æ–Ω", "–ò–æ–Ω", "–ü–ª–∞–∑–º–∞", "–ü–∞—Ç—Ä–æ–Ω", "–ì—Ä–∞–≤–∏—Ç–æ–Ω", "–§–æ—Ç–æ–Ω", "–ö–≤–∞–Ω—Ç", "–§–∏–∑–∏–∫–∞",
    "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "–ö–ª–∏–º–∞—Ç–æ–ª–æ–≥–∏—è", "–ö–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è", "–•–∏–º–∏—è", "–ê–Ω—Ç—Ä–æ–ø–æ–ª–æ–≥–∏—è", "–°–æ—Ü–∏–æ–ª–æ–≥–∏—è",
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "–≠–Ω—Ç–æ–º–æ–ª–æ–≥–∏—è", "–≠–∫–æ–ª–æ–≥–∏—è", "–≠—Ç–Ω–æ–≥—Ä–∞—Ñ–∏—è", "–ë–∏–æ—Ñ–∏–∑–∏–∫–∞", "–ì–µ–æ–ª–æ–≥–∏—è", "–ì–∏–¥—Ä–æ–ª–æ–≥–∏—è",
    "–ú–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—è", "–ó–æ–æ–ª–æ–≥–∏—è", "–û—Ä–Ω–∏—Ç–æ–ª–æ–≥–∏—è", "–ü–∞–ª–µ–æ–Ω—Ç–æ–ª–æ–≥–∏—è", "–°–∏—Å—Ç–µ–º–∞—Ç–∏–∫–∞", "–¢–∞–∫—Å–æ–Ω–æ–º–∏—è",
    "–§–∏–∑–∏–æ–ª–æ–≥–∏—è", "–≠–≤–æ–ª—é—Ü–∏—è", "–ì–µ–Ω–µ—Ç–∏–∫–∞", "–ú–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—è", "–ë–æ—Ç–∞–Ω–∏–∫–∞", "–ë–∏–æ—Ö–∏–º–∏—è", "–¶–∏—Ç–æ–ª–æ–≥–∏—è",
    "–ò–º–º—É–Ω–æ–ª–æ–≥–∏—è", "–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è–ë–∏–æ–ª–æ–≥–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–û–∫–µ–∞–Ω–æ–ª–æ–≥–∏—è", "–õ–∏–º–Ω–æ–ª–æ–≥–∏—è", "–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞",
    "–ë–∏–æ–º", "–§–∞—É–Ω–æ–≤–µ–¥–µ–Ω–∏–µ", "–§–ª–æ—Ä–∞", "–ì–µ–æ–±–æ—Ç–∞–Ω–∏–∫–∞", "–û—Ä–Ω–∏—Ç–æ—Ñ–∞—É–Ω–∞"
]


def generate_unique_case_identifier():
    serial_number = random.randint(1000, 9999)
    code_word = random.choice(code_words)
    return f"{serial_number}-{code_word}"


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if not user:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language / Tilni tanlang", reply_markup=language_menu())
    else:
        await message.answer('–ú–µ–Ω—é', reply_markup=main_keyboard('ru'))


@dp.message_handler(commands=['id'])
async def start(message: types.Message):
    chat_id = message.chat.id
    await message.answer(f"{chat_id}")


@dp.message_handler(Text(equals=['üá∫üáø O\'zbekcha', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'üá¨üáß English']))
async def set_language_and_register(message: types.Message, state: FSMContext):
    if message.text == 'üá∫üáø O\'zbekcha':
        lang = 'uz'
    elif message.text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        lang = 'ru'
    else:
        lang = 'en'

    await state.update_data(language=lang)
    await start_registration(message, state)

async def start_registration(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    name = message.from_user.full_name
    lang = user_data.get('language', 'en')

    prompts = {
        'ru': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        'uz': "Ismingizni kiriting:",
        'en': "Enter your name:"
    }

    await message.answer(prompts[lang], reply_markup=generate_name(name))
    await Registration.name.set()

@dp.message_handler(state=Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    user_data = await state.get_data()
    lang = user_data.get('language', 'en')

    contact_keyb = contact_keyboard(lang)

    prompts = {
        'ru': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        'uz': "Telefon raqamingizni yuboring:",
        'en': "Send your phone number:"
    }

    await message.answer(prompts[lang], reply_markup=contact_keyb)
    await Registration.phone.set()


@dp.message_handler(content_types=types.ContentType.CONTACT, state=Registration.phone)
async def process_phone(message: types.Message, state: FSMContext):
    contact = message.contact
    if contact is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    await state.update_data(phone=contact.phone_number)
    user_data = await state.get_data()
    lang = user_data.get('language', 'en')

    prompts = {
        'ru': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
        'uz': "Shaharingizni kiriting:",
        'en': "Enter your city:"
    }

    await message.answer(prompts[lang], reply_markup=ReplyKeyboardRemove())
    await Registration.city.set()

FAQS = {
    'ru': {
        "1. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∞–∫—Ç–∏–≤–æ–≤?": "–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞–∫—Ç–∏–≤–æ–≤ –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Å–ª—É—á–∞—è. –í —Å—Ä–µ–¥–Ω–µ–º, –ø—Ä–æ—Ü–µ—Å—Å –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 5 –¥–æ 6 –º–µ—Å—è—Ü–µ–≤. –û–¥–Ω–∞–∫–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É—á–∞–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ—à–µ–Ω—ã –±—ã—Å—Ç—Ä–µ–µ –∏–ª–∏ –¥–æ–ª—å—à–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.",
        "2. –í–æ–∑–º–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∏–ª–∏ —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤—ã?": "–î–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∏–ª–∏ —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤—ã. –ù–∞—à —É—Å–ø–µ—Ö –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞, —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–æ—Ç–µ—Ä–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è –º–µ—Ä. –•–æ—Ç—è –º—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç, –∫–∞–∂–¥—ã–π —Å–ª—É—á–∞–π —É–Ω–∏–∫–∞–ª–µ–Ω –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
        "3. –°–∫–æ–ª—å–∫–æ –≤—ã –≤–∑–∏–º–∞–µ—Ç–µ –∑–∞ —É—Å–ª—É–≥–∏ –ø–æ –≤–æ–∑–≤—Ä–∞—Ç—É –∞–∫—Ç–∏–≤–æ–≤?": "–ù–∞—à–∏ –≥–æ–Ω–æ—Ä–∞—Ä—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–ª—É—á–∞—è. –û–±—ã—á–Ω–æ –º—ã –≤–∑–∏–º–∞–µ–º –∞–≤–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω–æ–π —Å—É–º–º—ã. –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç 10% –¥–æ 50%, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ —Å—É–º–º—ã.",
        "4. –ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞?": "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–∏, –≤–∫–ª—é—á–∞—è –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤, –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é. –ß–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ, —Ç–µ–º –ª—É—á—à–µ –º—ã —Å–º–æ–∂–µ–º –ø–æ–º–æ—á—å –≤–∞–º –≤ –≤–æ–∑–≤—Ä–∞—Ç–µ –∞–∫—Ç–∏–≤–æ–≤.",
        "5. –ö–∞–∫ –≤—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?": "–ú—ã –ø—Ä–∏–¥–∞–µ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–µ—Ä—ã –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–¥–ª–µ–∂–∞—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.",
        "6. –ö–∞–∫–∏–µ —Ç–∏–ø—ã –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –≤–µ—Ä–Ω—É—Ç—å?": "–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–µ —à–∏—Ä–æ–∫–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞ –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤–æ–≤, –≤–∫–ª—é—á–∞—è, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å, –ë–∏—Ç–∫–æ–π–Ω–æ–º, –≠—Ñ–∏—Ä–∏—É–º–æ–º –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞–ª—å—Ç–∫–æ–π–Ω–∞–º–∏. –ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, –º–æ–∂–µ–º –ª–∏ –º—ã –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–∫—Ç–∏–≤–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.",
        "7. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏ –≤—ã –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∞–∫—Ç–∏–≤–æ–≤?": "–•–æ—Ç—è –º—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–æ–≤, –º—ã –Ω–µ –º–æ–∂–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞–∂–¥–æ–º —Å–ª—É—á–∞–µ –∏–∑-–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–µ–π. –û–¥–Ω–∞–∫–æ –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –≤–∞–º —Ç—â–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –æ–±–æ–∑–Ω–∞—á–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã.",
        "8. –ö–∞–∫ —è –º–æ–≥—É –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏?": "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —Å–ª—É—á–∞–µ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∞–π—Ç –∏–ª–∏ –±–æ—Ç. –ú—ã –æ—Ü–µ–Ω–∏–º —Å–ª—É—á–∞–π –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —Å –Ω–∞—à–∏–º–∏ –≤—ã–≤–æ–¥–∞–º–∏ –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ —à–∞–≥–∞–º–∏.",
        "9. –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ –º–æ–∏ –∞–∫—Ç–∏–≤—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã?": "–ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —É—Å–∏–ª–∏–π –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º, —á—Ç–æ –≤–∞—à–∏ –∞–∫—Ç–∏–≤—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, –º—ã —Å–æ–æ–±—â–∏–º –≤–∞–º –æ–± —ç—Ç–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã –∞–≤–∞–Ω—Å–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –ø–æ–∫—Ä—ã–≤–∞—é—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –Ω–∞—à–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —É—Å–∏–ª–∏—è.",
        "10. –ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–º–æ—á—å –≤–µ—Ä–Ω—É—Ç—å –∞–∫—Ç–∏–≤—ã, –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π?": "–î–∞, —É –Ω–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å —Å–ª—É—á–∞—è–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç —É—Å–µ—Ä–¥–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∞–∫—Ç–∏–≤–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –≤–æ–∑–≤—Ä–∞—Ç–∞. –û–¥–Ω–∞–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç—ã—Ö –º–µ—Ä."
    },
    'uz': {
        "1. Kripto aktivlarimni qaytarish qancha vaqtni o`z ichiga oladi?": "Aktivlarni qaytarib olish uchun ketadigan vaqt ishning o'ziga xos xususiyatlariga qarab farq qilishi mumkin. O'rtacha hisobda, bu jarayon odatda 5-6 oy davom etadi. Biroq, ba'zi ishlar murakkabligi va talab etiladigan resurslariga qarab tezroq hal bo'lishi yoki uzoqroq vaqt olishi mumkin.",
        "2. Yo`qolgan yoki o`g`irlangan kripto aktivlarni qaytarish mumkinmi?": "Ha, yo'qolgan yoki o'g'irlangan kripto aktivlarni qaytarib olish mumkin. Bizning muvaffaqiyatimiz aktiv turi, yo'qotish tabiati va harakat tezligi kabi turli omillarga bog'liq. Biz aktivlarni qaytarib olish imkoniyatlarini maksimal darajada oshirishga harakat qilsak-da, har bir holat o'ziga xos va natijalar ham turlicha bo'lishi mumkin.",
        "3. Kripto aktivlarni qaytarish xizmatlari uchun qancha haq olasiz?": "Bizning xizmat haqlarimiz har bir holatning o'ziga xos xususiyatlariga bog'liq. Biz odatda dastlabki xarajatlarni qoplash uchun avans to‚Äòlovini va undirilgan summaning foiziga qarab qayta tiklash to‚Äòlovini olamiz. Bu foiz qaytarish qiyinchiligi va jalb qilingan summa kabi omillarga qarab 10% dan 50% gacha bo'lishi mumkin.",
        "4. Men qaytarish jarayoni boshlanishi uchun qanday ma‚Äôlumotlarni taqdim qilishim kerak?": "Qaytarish jarayonini boshlash uchun biz hodisa haqida batafsil ma'lumotni talab qilamiz, jumladan tranzaksiya tafsilotlari, hamyon manzillari, aloqa yozuvlari va boshqa tegishli hujjatlar kabi. Siz qanchalik ko'p ma'lumot taqdim eta olsangiz, biz sizning aktivlaringizni qaytarib olishda shunchalik yaxshi yordam bera olamiz.",
        "5. Mening ma'lumotlarim xavfsizligi va maxfiyligini qanday ta'minlaysiz?": "Biz sizning ma'lumotlaringiz xavfsizligi va maxfiyligini birinchi o`ringa qo`yamiz. Bizning jamoamiz sizning shaxsiy ma'lumotlaringiz eng yuqori darajadagi e'tibor va maxfiylik bilan ta‚Äôminlanishi uchun qat‚Äôiy xavfsizlik protokollaridan va ma‚Äôlumotlarni himoya qilish chora-tadbirlaridan foydalanadi.",
        "6. Qanday turdagi kripto aktivlarni tiklashga yordam bera olasiz?": "Biz turli xil kripto aktivlarni qaytarib olishga ixtisoslashganmiz, jumladan, lekin cheklanmagan holda, Bitcoin, Ethereum va turli altcoinlar. Agar siz bizning aniq aktiv bilan yordam bera olishimizdan shubhalansangiz, iltimos, maslahat uchun biz bilan bog‚Äôlaning.",
        "7. Siz aktivlarni qaytarish uchun qandaydir kafolatlar taklif qila olasizmi?": "Biz aktivlaringizni qaytarish uchun barcha imkoniyatlarni amalga oshirishga harakat qilsak-da, har bir holatda 100% kafolat bera olmaymiz. Biroq, biz sizning holatingizni batafsil baholaymiz va ishni boshlashdan oldin mumkin bo‚Äôlgan muvaffaqiyat darajasini belgilaymiz.",
        "8. Qanday qilib sizning xizmatlaringizdan foydalanishni boshlashim mumkin?": "Boshlash uchun, iltimos, saytimiz yoki bot orqali sizning holatingiz haqida barcha kerakli ma‚Äôlumotlarni yuboring. Biz holatni baholaymiz va sizga keyingi qadamlar va natijalar bilan bog‚Äôlanamiz.",
        "9. Agar aktivlarimni qaytarish imkoniyati bolmasa nima boladi?": "Agar bizning batafsil tekshiruv va harakatlardan so‚Äông aktivlaringizni qaytarib olish imkoniyati bo‚Äôlmasa, biz sizga bu haqda xabar beramiz. E‚Äôtibor bering, dastlabki to‚Äôlovlarni qaytarib berish yo‚Äôq, chunki ular bizning tadqiqot va harakatlarimiz uchun dastlabki xarajatlarni qoplashni o‚Äôz ichiga oladi.",
        "10. Firibgarlik natijasida yo‚Äòqolgan aktivlarni qayta tiklashga yordam bera olasizmi?": "Ha, biz firibgarlik va soxtalashtirish bilan bog‚Äôliq holatlar bilan ishlash tajribasiga egamiz. Bizning jamoamiz aktivlarni aniqlash va qaytarish uchun barcha sa‚Äôy-harakatlarni amalga oshiradi. Biroq, firibgarlikning xususiyati va tezkorlikka qarab muvaffaqiyat darajasi turlicha bo‚Äôlishi mumkin."
    }
}


@dp.message_handler(lambda message: message.text in ['‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', '‚ùì Tez-tez so‚Äòraladigan savollar'])
async def faq_menu(message: types.Message):
    lang = 'ru' if message.text == '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã' else 'uz'
    markup = faq_keyboard(lang)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)

@dp.message_handler(lambda message: message.text in FAQS['ru'] or message.text in FAQS['uz'])
async def faq_answer(message: types.Message):
    lang = 'ru' if message.text in FAQS['ru'] else 'uz'
    answer = FAQS[lang].get(message.text, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await message.answer(answer)


@dp.message_handler(regexp="üîô")
async def back(message: types.Message):
    user_id = message.from_user.id
    lang = get_lang(user_id)
    if lang == ('ru',):
        await message.answer('üëàüèª', reply_markup=main_keyboard('ru'))
    elif lang == ('uz',):
        await message.answer('üëàüèª', reply_markup=main_keyboard('uz'))

@dp.message_handler(state=Registration.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    user_data = await state.get_data()
    lang = user_data.get('language', 'en')

    prompts = {
        'ru': "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–æ—à–µ–Ω–Ω–∏–∫–∞:",
        'uz': "Moshennik ismini kiriting:",
        'en': "Enter the scammer's name:"
    }

    await message.answer(prompts[lang])
    await Registration.scammer_name.set()

@dp.message_handler(state=Registration.scammer_name)
async def process_scammer_name(message: types.Message, state: FSMContext):
    await state.update_data(scammer_name=message.text)
    user_data = await state.get_data()
    lang = user_data.get('language', 'en')

    prompts = {
        'ru': "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–∞–∂–∏:",
        'uz': "O'g'irlik summasini kiriting:",
        'en': "Enter the theft amount:"
    }

    await message.answer(prompts[lang])
    await Registration.theft_amount.set()

@dp.message_handler(state=Registration.theft_amount)
async def process_theft_amount(message: types.Message, state: FSMContext):
    await state.update_data(theft_amount=message.text)
    user_data = await state.get_data()
    lang = user_data.get('language', 'en')

    prompts = {
        'ru': "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∞—è —Å—Ö–µ–º–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å:",
        'uz': "Qanday firibgarlik sxemasi ishlatilganligini tavsiflang:",
        'en': "Describe the fraud method used:"
    }

    await message.answer(prompts[lang])
    await Registration.fraud_method.set()

@dp.message_handler(state=Registration.fraud_method)
async def process_fraud_method(message: types.Message, state: FSMContext):
    await state.update_data(fraud_method=message.text)
    user_data = await state.get_data()
    lang = user_data.get('language', 'en')

    prompts = {
        'ru': "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ –º–æ—à–µ–Ω–Ω–∏–∫–∞:",
        'uz': "Moshennikning birjasini kiriting:",
        'en': "Enter the scammer's exchange name:"
    }

    await message.answer(prompts[lang])
    await Registration.exchange_name.set()



def create_case_pdf(user_data, media_files, pdf_path):
    c = canvas.Canvas(pdf_path, pagesize=letter)
    width, height = letter

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    c.drawString(100, height - 50, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {user_data['name']}:")
    c.drawString(100, height - 70, f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}")
    c.drawString(100, height - 90, f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user_data['username']}")
    c.drawString(100, height - 110, f"ID: {user_data['user_id']}")
    c.drawString(100, height - 130, f"–ì–æ—Ä–æ–¥: {user_data['city']}")
    c.drawString(100, height - 150, f"–ò–º—è –º–æ—à–µ–Ω–Ω–∏–∫–∞: {user_data['scammer_name']}")
    c.drawString(100, height - 170, f"–°—É–º–º–∞ –∫—Ä–∞–∂–∏: {user_data['theft_amount']}")
    c.drawString(100, height - 190, f"–°—Ö–µ–º–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞: {user_data['fraud_method']}")
    c.drawString(100, height - 210, f"–ë–∏—Ä–∂–∞ –º–æ—à–µ–Ω–Ω–∏–∫–∞: {user_data['exchange_name']}")
    c.drawString(100, height - 230, f"–ê–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –º–æ—à–µ–Ω–Ω–∏–∫–∞: {user_data['scam_wallet_address']}")
    c.drawString(100, height - 250, f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: ‚Ññ{user_data['serial_number']}")
    c.drawString(100, height - 270, f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: #{user_data['code_word']}")
    c.drawString(100, height - 290, f"–û–ø–∏—Å–∞–Ω–∏–µ: {user_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    y_position = height - 320
    for media in media_files:
        image = ImageReader(media)
        c.drawImage(image, 100, y_position, width=400, preserveAspectRatio=True, mask='auto')
        y_position -= 220
        if y_position < 100:
            c.showPage()
            y_position = height - 50

    c.save()


@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.VIDEO],
                    state=Registration.conversation_screenshots)
async def process_conversation_screenshots(message: types.Message, state: FSMContext):
    data = await state.get_data()
    conversation_screenshots = data.get('conversation_screenshots', [])
    media = MediaGroup()

    if message.photo:
        for photo in message.photo:
            conversation_screenshots.append(photo.file_id)
            media.attach_photo(photo.file_id, caption='')  # Empty caption, can be customized
    if message.video:
        for video in message.video:
            conversation_screenshots.append(video.file_id)
            media.attach_video(video.file_id, caption='')  # Empty caption, can be customized

    await state.update_data(conversation_screenshots=conversation_screenshots)

    user_data = await state.get_data()
    lang = user_data.get('language', 'en')

    prompts = {
        'ru': "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –º–æ—à–µ–Ω–Ω–∏–∫–∞:",
        'uz': "Firibgarning kriptovalyuta manzilini kiriting:",
        'en': "Enter the scammer's crypto wallet address:"
    }

    await message.answer_media_group(media)
    await message.answer(prompts[lang])
    await Registration.scam_wallet_address.set()


@dp.message_handler(state=Registration.exchange_name)
async def process_exchange_name(message: types.Message, state: FSMContext):
    await state.update_data(exchange_name=message.text)
    user_data = await state.get_data()
    lang = user_data.get('language', 'en')

    prompts = {
        'ru': "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–µ—Ä–µ–ø–∏—Å–∫–∏:",
        'uz': "Suhbatning skrinshotlarini biriktiring:",
        'en': "Attach screenshots of the conversation:"
    }

    await message.answer(prompts[lang])
    await Registration.conversation_screenshots.set()

@dp.message_handler(state=Registration.scam_wallet_address)
async def process_scam_wallet_address(message: types.Message, state: FSMContext):
    await state.update_data(scam_wallet_address=message.text)

    user_data = await state.get_data()
    user_id = message.from_user.id
    name = user_data['name']
    phone = user_data['phone']
    city = user_data['city']
    scammer_name = user_data['scammer_name']
    theft_amount = user_data['theft_amount']
    fraud_method = user_data['fraud_method']
    exchange_name = user_data['exchange_name']
    scam_wallet_address = user_data['scam_wallet_address']
    lang = user_data.get('lang', 'ru')
    case_id = generate_unique_case_identifier()
    serial_number, code_word = case_id.split('-')

    save_case(user_id, name, phone, city, scammer_name, theft_amount, fraud_method, exchange_name, scam_wallet_address, case_id, serial_number, code_word)

    prompts = {
        'ru': f"–í–∞—à–µ –¥–µ–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º: {case_id}",
        'uz': f"Sizning ishingiz muvaffaqiyatli saqlandi: {case_id}",
        'en': f"Your case has been successfully saved with ID: {case_id}"
    }

    await message.answer(prompts[lang], reply_markup=main_keyboard(lang))
    await state.finish()

    caption = (f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {name}:\n"
               f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
               f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}\n"
               f"ID: {user_id}\n"
               f"–ì–æ—Ä–æ–¥: {city}\n"
               f"–ò–º—è –º–æ—à–µ–Ω–Ω–∏–∫–∞: {scammer_name}\n"
               f"–°—É–º–º–∞ –∫—Ä–∞–∂–∏: {theft_amount}\n"
               f"–°—Ö–µ–º–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞: {fraud_method}\n"
               f"–ë–∏—Ä–∂–∞ –º–æ—à–µ–Ω–Ω–∏–∫–∞: {exchange_name}\n"
               f"–ê–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –º–æ—à–µ–Ω–Ω–∏–∫–∞: {scam_wallet_address}\n"
               f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: ‚Ññ{serial_number}\n"
               f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: #{code_word}\n"
               f"–û–ø–∏—Å–∞–Ω–∏–µ: {user_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")

    media_files = []

    # Handle conversation screenshots if provided
    for screenshot in user_data.get('conversation_screenshots', []):
        media_files.append(types.InputMediaPhoto(media=screenshot))

    # Send media as an album if multiple files are present
    if media_files:
        if len(media_files) > 1:
            await bot.send_media_group(ADMIN_GROUP_ID, media_files)
            await bot.send_message(ADMIN_GROUP_ID, caption)
        else:
            await bot.send_photo(ADMIN_GROUP_ID, media_files[0].media, caption=caption)
    else:
        await bot.send_message(ADMIN_GROUP_ID, caption)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)





#
# import logging
# from aiogram import Bot, Dispatcher, types
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.dispatcher import FSMContext
# from aiogram.dispatcher.filters.state import State, StatesGroup
# from aiogram.utils import executor
# from aiogram.dispatcher.filters import Text
# from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
# from keyboards import *
# from settings import BOT_TOKEN, ADMIN_GROUP_ID
# from work import *
# from aiogram.types import InputMediaPhoto, InputMediaVideo, InputMediaAudio
#
# logging.basicConfig(level=logging.INFO)
# bot = Bot(token=BOT_TOKEN)
# storage = MemoryStorage()
# dp = Dispatcher(bot, storage=storage)
#
#
# class Registration(StatesGroup):
#     name = State()
#     phone = State()
#     city = State()
#     scammer_name = State()
#     theft_amount = State()
#     fraud_method = State()
#     exchange_name = State()
#     conversation_screenshots = State()
#     scam_wallet_address = State()
#
#
# @dp.message_handler(commands=['start'])
# async def start(message: types.Message):
#     user_id = message.from_user.id
#     user = get_user(user_id)
#     if not user:
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language / Tilni tanlang", reply_markup=language_menu())
#     else:
#         await message.answer('–ú–µ–Ω—é', reply_markup=main_keyboard('ru'))
#
#
# @dp.message_handler(commands=['id'])
# async def start(message: types.Message):
#     chat_id = message.chat.id
#     await message.answer(f"{chat_id}")
#
#
# @dp.message_handler(Text(equals=['üá∫üáø O\'zbekcha', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'üá¨üáß English']))
# async def set_language_and_register(message: types.Message, state: FSMContext):
#     if message.text == 'üá∫üáø O\'zbekcha':
#         lang = 'uz'
#     elif message.text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
#         lang = 'ru'
#     else:
#         lang = 'en'
#
#     await state.update_data(language=lang)
#     await start_registration(message, state)
#
#
# async def start_registration(message: types.Message, state: FSMContext):
#     user_data = await state.get_data()
#     name = message.from_user.full_name
#     lang = user_data.get('language', 'en')
#
#     prompts = {
#         'ru': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
#         'uz': "Ismingizni kiriting:",
#         'en': "Enter your name:"
#     }
#
#     await message.answer(prompts[lang], reply_markup=generate_name(name))
#     await Registration.name.set()
#
#
# @dp.message_handler(state=Registration.name)
# async def process_name(message: types.Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#
#     contact_keyb = contact_keyboard(lang)
#
#     prompts = {
#         'ru': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
#         'uz': "Telefon raqamingizni yuboring:",
#         'en': "Send your phone number:"
#     }
#
#     await message.answer(prompts[lang], reply_markup=contact_keyb)
#     await Registration.phone.set()
#
#
# @dp.message_handler(content_types=types.ContentType.CONTACT, state=Registration.phone)
# async def process_phone(message: types.Message, state: FSMContext):
#     contact = message.contact
#     if contact is None:
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
#         return
#
#     await state.update_data(phone=contact.phone_number)
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#
#     prompts = {
#         'ru': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
#         'uz': "Shaharingizni kiriting:",
#         'en': "Enter your city:"
#     }
#
#     await message.answer(prompts[lang], reply_markup=ReplyKeyboardRemove())
#     await Registration.city.set()
#
#
# @dp.message_handler(state=Registration.city)
# async def process_city(message: types.Message, state: FSMContext):
#     await state.update_data(city=message.text)
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#
#     prompts = {
#         'ru': "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–æ—à–µ–Ω–Ω–∏–∫–∞:",
#         'uz': "Moshennik ismini kiriting:",
#         'en': "Enter the scammer's name:"
#     }
#
#     await message.answer(prompts[lang])
#     await Registration.scammer_name.set()
#
#
# @dp.message_handler(state=Registration.scammer_name)
# async def process_scammer_name(message: types.Message, state: FSMContext):
#     await state.update_data(scammer_name=message.text)
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#
#     prompts = {
#         'ru': "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–∞–∂–∏:",
#         'uz': "O'g'irlik summasini kiriting:",
#         'en': "Enter the theft amount:"
#     }
#
#     await message.answer(prompts[lang])
#     await Registration.theft_amount.set()
#
#
# @dp.message_handler(state=Registration.theft_amount)
# async def process_theft_amount(message: types.Message, state: FSMContext):
#     await state.update_data(theft_amount=message.text)
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#
#     prompts = {
#         'ru': "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∞—è —Å—Ö–µ–º–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å:",
#         'uz': "Qanday firibgarlik sxemasi ishlatilganligini tavsiflang:",
#         'en': "Describe the fraud method used:"
#     }
#
#     await message.answer(prompts[lang])
#     await Registration.fraud_method.set()
#
#
# @dp.message_handler(state=Registration.fraud_method)
# async def process_fraud_method(message: types.Message, state: FSMContext):
#     await state.update_data(fraud_method=message.text)
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#
#     prompts = {
#         'ru': "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ –º–æ—à–µ–Ω–Ω–∏–∫–∞:",
#         'uz': "Moshennikning birjasini kiriting:",
#         'en': "Enter the scammer's exchange name:"
#     }
#
#     await message.answer(prompts[lang])
#     await Registration.exchange_name.set()
#
#
# @dp.message_handler(state=Registration.exchange_name)
# async def process_exchange_name(message: types.Message, state: FSMContext):
#     await state.update_data(exchange_name=message.text)
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#
#     prompts = {
#         'ru': "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–µ—Ä–µ–ø–∏—Å–∫–∏:",
#         'uz': "Suhbatning skrinshotlarini biriktiring:",
#         'en': "Attach screenshots of the conversation:"
#     }
#
#     await message.answer(prompts[lang])
#     await Registration.conversation_screenshots.set()
#
#
# @dp.message_handler(state=Registration.scam_wallet_address)
# async def process_scam_wallet_address(message: types.Message, state: FSMContext):
#     await state.update_data(scam_wallet_address=message.text)
#     user_data = await state.get_data()
#
#     user_id = message.from_user.id
#     username = message.from_user.username
#     full_name = message.from_user.full_name
#     phone = user_data['phone']
#     lang = user_data['language']
#     city = user_data['city']
#     scammer_name = user_data['scammer_name']
#     theft_amount = user_data['theft_amount']
#     fraud_method = user_data['fraud_method']
#     exchange_name = user_data['exchange_name']
#     conversation_screenshots = user_data['conversation_screenshots']
#     scam_wallet_address = user_data['scam_wallet_address']
#
#     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#     add_user(lang, full_name, phone, username, user_id, city)
#
#     prompts = {
#         'ru': "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
#         'uz': "Siz muvaffaqiyatli ro‚Äòyxatdan o‚Äòtdingiz!",
#         'en': "You have successfully registered!"
#     }
#
#     await message.answer(prompts[lang], reply_markup=main_keyboard(lang))
#     await state.finish()
#
#     # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
#     caption = (f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {full_name}:\n"
#                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
#                f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
#                f"ID: {user_id}\n"
#                f"–ì–æ—Ä–æ–¥: {city}\n"
#                f"–ò–º—è –º–æ—à–µ–Ω–Ω–∏–∫–∞: {scammer_name}\n"
#                f"–°—É–º–º–∞ –∫—Ä–∞–∂–∏: {theft_amount}\n"
#                f"–°—Ö–µ–º–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞: {fraud_method}\n"
#                f"–ë–∏—Ä–∂–∞ –º–æ—à–µ–Ω–Ω–∏–∫–∞: {exchange_name}\n"
#                f"–ê–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –º–æ—à–µ–Ω–Ω–∏–∫–∞: {scam_wallet_address}\n"
#                f"–û–ø–∏—Å–∞–Ω–∏–µ: {user_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
#
#     media_files = []
#
#     # Handle conversation screenshots if provided
#     for screenshot in conversation_screenshots:
#         media_files.append(types.InputMediaPhoto(media=screenshot))
#
#     # Send media as an album if multiple files are present
#     if media_files:
#         if len(media_files) > 1:
#             await bot.send_media_group(ADMIN_GROUP_ID, media_files)
#             await bot.send_message(ADMIN_GROUP_ID, caption)
#         else:
#             await bot.send_photo(ADMIN_GROUP_ID, media_files[0].media, caption=caption)
#     else:
#         await bot.send_message(ADMIN_GROUP_ID, caption)
#
#     await message.answer(
#         "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!" if lang == 'ru' else "Arizangiz yuborildi!" if lang == 'uz' else "Your application has been sent!", reply_markup=main_keyboard(lang))
#
#
# async def on_startup(dispatcher):
#     # –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–¥–µ—Å—å
#     # await init_db()
#     pass
#
# FAQS = {
#     'ru': {
#         "1. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∞–∫—Ç–∏–≤–æ–≤?": "–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞–∫—Ç–∏–≤–æ–≤ –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Å–ª—É—á–∞—è. –í —Å—Ä–µ–¥–Ω–µ–º, –ø—Ä–æ—Ü–µ—Å—Å –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 5 –¥–æ 6 –º–µ—Å—è—Ü–µ–≤. –û–¥–Ω–∞–∫–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É—á–∞–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ—à–µ–Ω—ã –±—ã—Å—Ç—Ä–µ–µ –∏–ª–∏ –¥–æ–ª—å—à–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.",
#         "2. –í–æ–∑–º–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∏–ª–∏ —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤—ã?": "–î–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∏–ª–∏ —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤—ã. –ù–∞—à —É—Å–ø–µ—Ö –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞, —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–æ—Ç–µ—Ä–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è –º–µ—Ä. –•–æ—Ç—è –º—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç, –∫–∞–∂–¥—ã–π —Å–ª—É—á–∞–π —É–Ω–∏–∫–∞–ª–µ–Ω –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
#         "3. –°–∫–æ–ª—å–∫–æ –≤—ã –≤–∑–∏–º–∞–µ—Ç–µ –∑–∞ —É—Å–ª—É–≥–∏ –ø–æ –≤–æ–∑–≤—Ä–∞—Ç—É –∞–∫—Ç–∏–≤–æ–≤?": "–ù–∞—à–∏ –≥–æ–Ω–æ—Ä–∞—Ä—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–ª—É—á–∞—è. –û–±—ã—á–Ω–æ –º—ã –≤–∑–∏–º–∞–µ–º –∞–≤–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω–æ–π —Å—É–º–º—ã. –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç 10% –¥–æ 50%, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ —Å—É–º–º—ã.",
#         "4. –ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞?": "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–∏, –≤–∫–ª—é—á–∞—è –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤, –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é. –ß–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ, —Ç–µ–º –ª—É—á—à–µ –º—ã —Å–º–æ–∂–µ–º –ø–æ–º–æ—á—å –≤–∞–º –≤ –≤–æ–∑–≤—Ä–∞—Ç–µ –∞–∫—Ç–∏–≤–æ–≤.",
#         "5. –ö–∞–∫ –≤—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?": "–ú—ã –ø—Ä–∏–¥–∞–µ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–µ—Ä—ã –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–¥–ª–µ–∂–∞—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.",
#         "6. –ö–∞–∫–∏–µ —Ç–∏–ø—ã –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –≤–µ—Ä–Ω—É—Ç—å?": "–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–µ —à–∏—Ä–æ–∫–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞ –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤–æ–≤, –≤–∫–ª—é—á–∞—è, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å, –ë–∏—Ç–∫–æ–π–Ω–æ–º, –≠—Ñ–∏—Ä–∏—É–º–æ–º –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞–ª—å—Ç–∫–æ–π–Ω–∞–º–∏. –ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, –º–æ–∂–µ–º –ª–∏ –º—ã –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–∫—Ç–∏–≤–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.",
#         "7. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏ –≤—ã –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∞–∫—Ç–∏–≤–æ–≤?": "–•–æ—Ç—è –º—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–æ–≤, –º—ã –Ω–µ –º–æ–∂–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞–∂–¥–æ–º —Å–ª—É—á–∞–µ –∏–∑-–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–µ–π. –û–¥–Ω–∞–∫–æ –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –≤–∞–º —Ç—â–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –æ–±–æ–∑–Ω–∞—á–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã.",
#         "8. –ö–∞–∫ —è –º–æ–≥—É –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏?": "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —Å–ª—É—á–∞–µ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∞–π—Ç –∏–ª–∏ –±–æ—Ç. –ú—ã –æ—Ü–µ–Ω–∏–º —Å–ª—É—á–∞–π –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —Å –Ω–∞—à–∏–º–∏ –≤—ã–≤–æ–¥–∞–º–∏ –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ —à–∞–≥–∞–º–∏.",
#         "9. –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ –º–æ–∏ –∞–∫—Ç–∏–≤—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã?": "–ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —É—Å–∏–ª–∏–π –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º, —á—Ç–æ –≤–∞—à–∏ –∞–∫—Ç–∏–≤—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, –º—ã —Å–æ–æ–±—â–∏–º –≤–∞–º –æ–± —ç—Ç–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã –∞–≤–∞–Ω—Å–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –ø–æ–∫—Ä—ã–≤–∞—é—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –Ω–∞—à–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —É—Å–∏–ª–∏—è.",
#         "10. –ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–º–æ—á—å –≤–µ—Ä–Ω—É—Ç—å –∞–∫—Ç–∏–≤—ã, –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π?": "–î–∞, —É –Ω–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å —Å–ª—É—á–∞—è–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç —É—Å–µ—Ä–¥–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∞–∫—Ç–∏–≤–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –≤–æ–∑–≤—Ä–∞—Ç–∞. –û–¥–Ω–∞–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç—ã—Ö –º–µ—Ä."
#     },
#     'uz': {
#         "1. Kripto aktivlarimni qaytarish qancha vaqtni o`z ichiga oladi?": "Aktivlarni qaytarib olish uchun ketadigan vaqt ishning o'ziga xos xususiyatlariga qarab farq qilishi mumkin. O'rtacha hisobda, bu jarayon odatda 5-6 oy davom etadi. Biroq, ba'zi ishlar murakkabligi va talab etiladigan resurslariga qarab tezroq hal bo'lishi yoki uzoqroq vaqt olishi mumkin.",
#         "2. Yo`qolgan yoki o`g`irlangan kripto aktivlarni qaytarish mumkinmi?": "Ha, yo'qolgan yoki o'g'irlangan kripto aktivlarni qaytarib olish mumkin. Bizning muvaffaqiyatimiz aktiv turi, yo'qotish tabiati va harakat tezligi kabi turli omillarga bog'liq. Biz aktivlarni qaytarib olish imkoniyatlarini maksimal darajada oshirishga harakat qilsak-da, har bir holat o'ziga xos va natijalar ham turlicha bo'lishi mumkin.",
#         "3. Kripto aktivlarni qaytarish xizmatlari uchun qancha haq olasiz?": "Bizning xizmat haqlarimiz har bir holatning o'ziga xos xususiyatlariga bog'liq. Biz odatda dastlabki xarajatlarni qoplash uchun avans to‚Äòlovini va undirilgan summaning foiziga qarab qayta tiklash to‚Äòlovini olamiz. Bu foiz qaytarish qiyinchiligi va jalb qilingan summa kabi omillarga qarab 10% dan 50% gacha bo'lishi mumkin.",
#         "4. Men qaytarish jarayoni boshlanishi uchun qanday ma‚Äôlumotlarni taqdim qilishim kerak?": "Qaytarish jarayonini boshlash uchun biz hodisa haqida batafsil ma'lumotni talab qilamiz, jumladan tranzaksiya tafsilotlari, hamyon manzillari, aloqa yozuvlari va boshqa tegishli hujjatlar kabi. Siz qanchalik ko'p ma'lumot taqdim eta olsangiz, biz sizning aktivlaringizni qaytarib olishda shunchalik yaxshi yordam bera olamiz.",
#         "5. Mening ma'lumotlarim xavfsizligi va maxfiyligini qanday ta'minlaysiz?": "Biz sizning ma'lumotlaringiz xavfsizligi va maxfiyligini birinchi o`ringa qo`yamiz. Bizning jamoamiz sizning shaxsiy ma'lumotlaringiz eng yuqori darajadagi e'tibor va maxfiylik bilan ta‚Äôminlanishi uchun qat‚Äôiy xavfsizlik protokollaridan va ma‚Äôlumotlarni himoya qilish chora-tadbirlaridan foydalanadi.",
#         "6. Qanday turdagi kripto aktivlarni tiklashga yordam bera olasiz?": "Biz turli xil kripto aktivlarni qaytarib olishga ixtisoslashganmiz, jumladan, lekin cheklanmagan holda, Bitcoin, Ethereum va turli altcoinlar. Agar siz bizning aniq aktiv bilan yordam bera olishimizdan shubhalansangiz, iltimos, maslahat uchun biz bilan bog‚Äôlaning.",
#         "7. Siz aktivlarni qaytarish uchun qandaydir kafolatlar taklif qila olasizmi?": "Biz aktivlaringizni qaytarish uchun barcha imkoniyatlarni amalga oshirishga harakat qilsak-da, har bir holatda 100% kafolat bera olmaymiz. Biroq, biz sizning holatingizni batafsil baholaymiz va ishni boshlashdan oldin mumkin bo‚Äôlgan muvaffaqiyat darajasini belgilaymiz.",
#         "8. Qanday qilib sizning xizmatlaringizdan foydalanishni boshlashim mumkin?": "Boshlash uchun, iltimos, saytimiz yoki bot orqali sizning holatingiz haqida barcha kerakli ma‚Äôlumotlarni yuboring. Biz holatni baholaymiz va sizga keyingi qadamlar va natijalar bilan bog‚Äôlanamiz.",
#         "9. Agar aktivlarimni qaytarish imkoniyati bolmasa nima boladi?": "Agar bizning batafsil tekshiruv va harakatlardan so‚Äông aktivlaringizni qaytarib olish imkoniyati bo‚Äôlmasa, biz sizga bu haqda xabar beramiz. E‚Äôtibor bering, dastlabki to‚Äôlovlarni qaytarib berish yo‚Äôq, chunki ular bizning tadqiqot va harakatlarimiz uchun dastlabki xarajatlarni qoplashni o‚Äôz ichiga oladi.",
#         "10. Firibgarlik natijasida yo‚Äòqolgan aktivlarni qayta tiklashga yordam bera olasizmi?": "Ha, biz firibgarlik va soxtalashtirish bilan bog‚Äôliq holatlar bilan ishlash tajribasiga egamiz. Bizning jamoamiz aktivlarni aniqlash va qaytarish uchun barcha sa‚Äôy-harakatlarni amalga oshiradi. Biroq, firibgarlikning xususiyati va tezkorlikka qarab muvaffaqiyat darajasi turlicha bo‚Äôlishi mumkin."
#     }
# }
#
#
# @dp.message_handler(lambda message: message.text in ['‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', '‚ùì Tez-tez so‚Äòraladigan savollar'])
# async def faq_menu(message: types.Message):
#     lang = 'ru' if message.text == '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã' else 'uz'
#     markup = faq_keyboard(lang)
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)
#
# @dp.message_handler(lambda message: message.text in FAQS['ru'] or message.text in FAQS['uz'])
# async def faq_answer(message: types.Message):
#     lang = 'ru' if message.text in FAQS['ru'] else 'uz'
#     answer = FAQS[lang].get(message.text, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#     await message.answer(answer)
#
#
# @dp.message_handler(regexp="üîô")
# async def back(message: types.Message):
#     user_id = message.from_user.id
#     lang = get_lang(user_id)
#     if lang == ('ru',):
#         await message.answer('üëàüèª', reply_markup=main_keyboard('ru'))
#     elif lang == ('uz',):
#         await message.answer('üëàüèª', reply_markup=main_keyboard('uz'))
#
#
# @dp.message_handler(content_types=types.ContentType.PHOTO, state=Registration.conversation_screenshots)
# async def process_conversation_screenshots(message: types.Message, state: FSMContext):
#     photos = message.photo
#     await state.update_data(conversation_screenshots=[photo.file_id for photo in photos])
#     user_data = await state.get_data()
#     lang = user_data.get('language', 'en')
#
#     prompts = {
#         'ru': "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –º–æ—à–µ–Ω–Ω–∏–∫–∞:",
#         'uz': "Firibgarning kriptovalyuta manzilini kiriting:",
#         'en': "Enter the scammer's crypto wallet address:"
#     }
#
#     await message.answer(prompts[lang])
#     await Registration.scam_wallet_address.set()
#
#
# if __name__ == '__main__':
#     executor.start_polling(dp, on_startup=on_startup)


